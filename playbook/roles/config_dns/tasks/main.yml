- name: Set DNS server to use
  set_fact:
    dns_server: 10.44.4.23
  when: "dns_server is not defined"
  delegate_to: localhost


- name: Set DNS machine user to use
  set_fact:
    dns_machine_user: root
  when: "dns_machine_user is not defined"
  delegate_to: localhost

# We use the defined {{user_name}} since OSOOS also does the same
- name: Set DNS filename to use
  set_fact:
    dns_conf_file: "{{user_name}}.osepool.centralci.eng.rdu2.redhat.com.conf"
  delegate_to: localhost

- name: Ensure DNS key has the correct permissions
  file:
    path: "{{ role_path }}/files/dns_server.key"
    mode: 0600
  delegate_to: localhost

- name: Generate DNS file
  template:
    src: "{{ role_path }}/templates/dns.conf.j2"
    dest: "{{ role_path }}/files/dns-{{ openstack.vm.name }}.conf"
  delegate_to: localhost

- name: Copy zone file to DNS server
  command: scp -o ConnectTimeout=10 -i {{ role_path }}/files/dns_server.key {{ role_path }}/files/dns-{{ openstack.vm.name }}.conf {{ dns_machine_user }}@{{ dns_server }}:/etc/dnsmasq.d/{{ dns_conf_file}}
  register: copy_dns
  ignore_errors: true
  delegate_to: localhost

- name: Check dns zone config valid
  command: ssh -o ConnectTimeout=10 -i {{ role_path }}/files/dns_server.key -n {{ dns_machine_user }}@{{ dns_server }} "dnsmasq --test"
  register: config_result
  changed_when: false
  ignore_errors: true
  delegate_to: localhost

- name: Cat DNS conf file
  command: ssh -o ConnectTimeout=10 -i {{ role_path }}/files/dns_server.key {{ dns_machine_user }}@{{ dns_server }} "cat /etc/dnsmasq.d/{{ dns_conf_file}}"
  register: failed_dns_zone
  when: "config_result is not defined and 'syntax check OK' not in config_result.stderr and 'syntax check OK' not in config_result.stdout"
  delegate_to: localhost

- name: Remove config from server because there is error
  command: ssh -o ConnectTimeout=10 -i {{ role_path }}/files/dns_server.key -n {{ dns_machine_user }}@{{ dns_server }} "rm -f /etc/dnsmasq.d/{{ dns_conf_file}}"
  when: "config_result is not defined and 'syntax check OK' not in config_result.stderr and 'syntax check OK' not in config_result1.stdout"
  delegate_to: localhost

- name: Fail with message
  debug: msg="We were unable to generate correct DNS config file, exited. Find below contents of file we were attempting to generate"
  when: "config_result is not defined and 'syntax check OK' not in config_result.stderr and 'syntax check OK' not in config_result.stdout"
  delegate_to: localhost

- fail: msg="{{ failed_dns_zone.stdout }}"
  when: "config_result is not defined and 'syntax check OK' not in config_result.stderr and 'syntax check OK' not in config_result.stdout"
  delegate_to: localhost

- name: Restart DNS service on DNS server
  command: ssh -o ConnectTimeout=10 -i {{ role_path }}/files/dns_server.key -n {{ dns_machine_user }}@{{ dns_server }} "systemctl restart dnsmasq"
  register: dns_restart
  changed_when: false
  ignore_errors: true
  delegate_to: localhost

# - name: Update dnsmasq
#   shell: |
#     scp -i $DNS_KEY dns.conf {{ dns_server }}:/etc/dnsmasq.d/cmoulliard.osepool.centralci.eng.rdu2.redhat.com.conf
#     ssh -i $DNS_KEY {{ dns_server }} "cat /etc/dnsmasq.d/cmoulliard.osepool.centralci.eng.rdu2.redhat.com.conf"
#     ssh -i $DNS_KEY -n {{ dns_server }} "systemctl restart dnsmasq"
#     ssh -i $DNS_KEY -n {{ dns_server }} "rm -rf /etc/dnsmasq.d/cmoulliard.osepool.centralci.eng.rdu2.redhat.com.conf"
#     ssh -i $DNS_KEY -n {{ dns_server }} "systemctl restart dnsmasq"